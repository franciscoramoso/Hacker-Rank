{\rtf1\ansi\ansicpg1252\cocoartf1504
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 (require '[clojure.string :as str])\
(def B (map #(Integer/parseInt %) (str/split (read-line) #" ")))\
(def E (map #(Integer/parseInt %) (str/split (read-line) #" ")))\
(def L (map #(Integer/parseInt %) (str/split (read-line) #" ")))\
(def nums (range (first L) (last L) 0.001))\
(defn f [x]\
    (defn truef [y]\
	   (map  #(* %1 (Math/pow y %2)) B E))\
    (reduce + (vec (truef x))))\
       \
(def f-interval (vec (map #(f %) nums)))\
\
(def area (reduce + f-interval))\
(def volumen (* Math/PI (reduce + (vec (map #(Math/pow % 2) f-interval)))))\
\
(printf "%.2f"(/ area 1000))\
(println)\
(printf "%.2f"(/ volumen 1000))\
(println)\
\
\
\
}